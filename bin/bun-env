#!/usr/bin/env bun

import { program } from 'commander';
import {
  createEnvironment,
  activateEnvironment,
  deactivateEnvironment,
  deleteEnvironment,
  installDependency,
  listDependencies,
  switchVersion,
  loadPlugin,
  selfUpdate,
  getConfig,
  setConfig
} from '../lib/environmentManager.js';
import { initShellIntegration, autoSwitchVersion } from '../lib/shellIntegration.js';

program
  .hook('preAction', () => {
    initShellIntegration();
    autoSwitchVersion();
  });

program
  .command('create <name> [version]')
  .action(createEnvironment);

program
  .command('activate <name>')
  .action(activateEnvironment);

program
  .command('deactivate')
  .action(deactivateEnvironment);

program
  .command('delete <name>')
  .action(deleteEnvironment);

program
  .command('install <envName> <packageName>')
  .action(installDependency);

program
  .command('list <envName>')
  .action(listDependencies);

program
  .command('use <version>')
  .action(switchVersion);

program
  .command('plugin <action> [pluginName]')
  .action(loadPlugin);

program
  .command('self-update')
  .action(selfUpdate);

program
  .command('config <envName> <key> [value]')
  .action((envName, key, value) => {
    if (value === undefined) {
      console.log(getConfig(envName)[key]);
    } else {
      const config = getConfig(envName);
      config[key] = value;
      setConfig(envName, config);
    }
  });

program.parse(process.argv);
